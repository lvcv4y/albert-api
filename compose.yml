services:
  api:
    image: ghcr.io/etalab-ia/albert-api/app:latest
    restart: always
    env_file: .env
    ports:
      - 8000:8000
    volumes:
      - ./config.yml:/config.yml:ro
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy

  postgres:
    image: postgres:16.5
    restart: always
    user: postgres
    environment:
      - CREATE_DB=api,playground
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - POSTGRES_DB=postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./scripts/postgres_entrypoint.sh:/docker-entrypoint-initdb.d/postgres_entrypoint.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "postgres" ]
      interval: 4s
      timeout: 10s
      retries: 5
      start_period: 60s
  redis:
    image: redis/redis-stack-server:7.2.0-v11
    restart: always
    environment:
      REDIS_ARGS: "--dir /data --requirepass ${REDIS_PASSWORD} --user ${REDIS_USER} on >password ~* allcommands --save 60 1 --appendonly yes"
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 4s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.2
    restart: always
    ports:
      - ${ELASTICSEARCH_PORT}:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "ELASTIC_USERNAME=${ELASTICSEARCH_USERNAME}"
      - "ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "bash", "-c", ":> /dev/tcp/127.0.0.1/9200" ]
      interval: 4s
      timeout: 10s
      retries: 5

  mcp-bridge:
    image: ghcr.io/etalab-ia/albert-api-mcp-bridge/albert-api-mcp-bridge:latest
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always
    ports:
      - "${MCP_BRIDGE_PORT}:8000"
    environment:
      - MCP_BRIDGE__CONFIG__FILE=config.json
    volumes:
      - ./mcp/config.json:/mcp_bridge/config.json

volumes:
  postgres:
  redis:
  elasticsearch:
  # qdrant:
